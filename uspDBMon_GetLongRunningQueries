/*
		Date	:	23rd Oct 2022
		Purpose	:	This script creates 1 User-Table and 1 Stored Procedure to log long running queries for analysis
		Version	:	1.0
		License:
					This script is provided "AS IS" with no warranties, and confers no rights.

					EXEC [dbo].[uspDBMon_GetLongRunningQueries]
					SELECT * FROM [dbo].[tblDBMon_Long_Running_Queries]

		Modification History
		----------------------
		Oct	23rd, 2022	:	v1.0	:	Raghu Gopalakrishnan	:	Inception
*/

SET NOCOUNT ON
GO
USE [dba_local]
GO
DROP TABLE IF EXISTS [dbo].[tblDBMon_Long_Running_Queries]
GO
CREATE TABLE [dbo].[tblDBMon_Long_Running_Queries](
	[Date_Captured] [datetime] CONSTRAINT [DF_tblDBMon_Long_Running_Queries_Date_Captured] DEFAULT GETDATE() NOT NULL,
	[Session_ID] [smallint] NOT NULL,
	[Start_Time] [datetime] NOT NULL,
	[Login_Time] [datetime] NOT NULL,
	[Duration_Minutes] [int] NULL,
	[Host_Name] [nvarchar](128) NULL,
	[Login_Name] [nvarchar](128) NULL,
	[Command] [nvarchar](32) NULL,
	[Program_Name] [nvarchar](128) NULL,
	[Status] [nvarchar](30) NOT NULL,
	[Blocking_Session_ID] [smallint] NULL,
	[Wait_Type] [nvarchar](60) NULL,
	[Wait_Time_Seconds] [decimal](20, 0) NULL,
	[Total_Elapsed_Time_Seconds] [decimal](20, 0) NULL,
	[SQL_Handle] [varbinary](64) NULL,
	[Statement_SQL_Handle] [varbinary](64) NULL,
	[SQL_Text] [nvarchar](500) NULL,
	[Date_Updated] [datetime] CONSTRAINT [DF_tblDBMon_Long_Running_Queries_Date_Updated] DEFAULT GETDATE() NOT NULL
)
GO

CREATE CLUSTERED INDEX [IDX_tblDBMon_Long_Running_Queries_Date_Captured]
ON [dbo].[tblDBMon_Long_Running_Queries]([Date_Captured])

CREATE NONCLUSTERED INDEX [IDX_tblDBMon_Long_Running_Queries_Login_Time_Start_Time_Session_ID]
ON [dbo].[tblDBMon_Long_Running_Queries] ([Login_Time], [Start_Time], [Session_ID])
GO

INSERT INTO [dbo].[tblDBMon_Long_Running_Queries]
			([Date_Captured],
			[Session_ID],
			[Start_Time],
			[Login_Time],
			[Duration_Minutes],
			[Host_Name],
			[Login_Name],
			[Command],
			[Program_Name],
			[Status],
			[Blocking_Session_ID],
			[Wait_Type],
			[Wait_Time_Seconds],
			[Total_Elapsed_Time_Seconds],
			[SQL_Handle],
			[Statement_SQL_Handle],
			[SQL_Text],
			[Date_Updated])
SELECT		GETDATE() AS [Date_Captured],
			der.[session_id] AS [Session_ID],
			der.[start_time] AS [Start_Time],
			sp.[login_time] AS [Login_Time],
			datediff(mi, [start_time], getdate()) AS [Duration_Minutes],
			LTRIM (RTRIM ([hostname])) AS [Host_Name],
			LTRIM (RTRIM ([loginame])) AS [Login_Name],
			[command] AS [Command],
			LTRIM (RTRIM (sp.[program_name])) AS [Program_Name],
			der.[status] AS [Status],
			der.[blocking_session_id] AS [Blocking_Session_ID],
			der.[wait_type] AS [Wait_Type],
			CAST(der.[wait_time]/1000. AS DECIMAL(20,0)) AS [Wait_Time_Seconds],
			CAST(der.[total_elapsed_time]/1000. AS DECIMAL(20,0)) AS [Total_Elapsed_Time_Seconds],
			der.[sql_handle] AS [SQL_Handle],
			der.[statement_sql_handle] AS [Statement_SQL_Handle],
			CASE dest.[encrypted]
                    WHEN 1 THEN 'Encrypted'
                    ELSE SUBSTRING(ISNULL(CAST([text] AS NVARCHAR(500)), N'empty'), 0,500)
            END AS [SQL_Text], 
			GETDATE() AS [Date_Updated]
FROM		sys.dm_exec_requests der
INNER JOIN	sys.sysprocesses sp
		ON	der.[session_id] = sp.spid
OUTER APPLY	sys.dm_exec_sql_text(der.[sql_handle]) dest
WHERE		der.[session_id] > 50
AND			[command] NOT IN ('BACKUP DATABASE', 'BACKUP LOG', 'XE DISPATCHER', 'TASK MANAGER')
AND			[text] <> 'sp_server_diagnostics'
AND			datediff(mi, [start_time], getdate()) > 5
ORDER BY	der.[session_id]
GO

DROP PROC IF EXISTS [dbo].[uspDBMon_GetLongRunningQueries]
GO
CREATE PROC [dbo].[uspDBMon_GetLongRunningQueries]
@Query_Duration_Threshold_Minutes TINYINT = 5
AS
SET NOCOUNT ON
/*
		EXEC [dbo].[uspDBMon_GetLongRunningQueries]
		SELECT * FROM [dbo].[tblDBMon_Long_Running_Queries]
*/
--Get the queries running beyond the threshold specified under @Query_Duration_Threshold_Minutes
;WITH cteLong_Running_Queries
AS(
		SELECT		GETDATE() AS [Date_Captured],
					der.[session_id] AS [Session_ID],
					der.[start_time] AS [Start_Time],
					sp.[login_time] AS [Login_Time],
					datediff(mi, [start_time], getdate()) AS [Duration_Minutes],
					LTRIM (RTRIM ([hostname])) AS [Host_Name],
					LTRIM (RTRIM ([loginame])) AS [Login_Name],
					[command] AS [Command],
					LTRIM (RTRIM (sp.[program_name])) AS [Program_Name],
					der.[status] AS [Status],
					der.[blocking_session_id] AS [Blocking_Session_ID],
					der.[wait_type] AS [Wait_Type],
					CAST(der.[wait_time]/1000. AS DECIMAL(20,0)) AS [Wait_Time_Seconds],
					CAST(der.[total_elapsed_time]/1000. AS DECIMAL(20,0)) AS [Total_Elapsed_Time_Seconds],
					der.[sql_handle] AS [SQL_Handle],
					der.[statement_sql_handle] AS [Statement_SQL_Handle],
					CASE dest.[encrypted]
											WHEN 1 THEN 'Encrypted'
											ELSE SUBSTRING(ISNULL(CAST([text] AS NVARCHAR(500)), N'empty'), 0,500)
									END AS [SQL_Text], 
					GETDATE() AS [Date_Updated]
		FROM		sys.dm_exec_requests der
		INNER JOIN	sys.sysprocesses sp
				ON	der.[session_id] = sp.spid
		OUTER APPLY	sys.dm_exec_sql_text(der.[sql_handle]) dest
		WHERE		der.[session_id] > 50
		AND			[command] NOT IN ('BACKUP DATABASE', 'BACKUP LOG', 'XE DISPATCHER', 'TASK MANAGER')
		AND			[text] <> 'sp_server_diagnostics'
		AND			datediff(mi, [start_time], getdate()) > @Query_Duration_Threshold_Minutes
	)

--Upsert into the table
MERGE			[dbo].[tblDBMon_Long_Running_Queries] T
USING			[cteLong_Running_Queries] S 
	ON			T.Login_Time = S.Login_Time
	AND			T.Start_Time = S.Start_Time
	AND			T.Session_ID = S.Session_ID
WHEN MATCHED 
THEN
UPDATE SET 
				[Duration_Minutes] = S.[Duration_Minutes],
				[Command] = S.[Command],
				[Status] = S.[Status],
				[Blocking_Session_ID] = S.[Blocking_Session_ID],
				[Wait_Type] = S.[Wait_Type],
				[Wait_Time_Seconds] = S.[Wait_Time_Seconds],
				[Total_Elapsed_Time_Seconds] = S.[Total_Elapsed_Time_Seconds],
				[Date_Updated] = GETDATE()
WHEN NOT MATCHED BY TARGET 
THEN 
INSERT (	[Date_Captured],
			[Session_ID],
			[Start_Time],
			[Login_Time],
			[Duration_Minutes],
			[Host_Name],
			[Login_Name],
			[Command],
			[Program_Name],
			[Status],
			[Blocking_Session_ID],
			[Wait_Type],
			[Wait_Time_Seconds],
			[Total_Elapsed_Time_Seconds],
			[SQL_Handle],
			[Statement_SQL_Handle],
			[SQL_Text],
			[Date_Updated])
VALUES (	S.[Date_Captured],
			S.[Session_ID],
			S.[Start_Time],
			S.[Login_Time],
			S.[Duration_Minutes],
			S.[Host_Name],
			S.[Login_Name],
			S.[Command],
			S.[Program_Name],
			S.[Status],
			S.[Blocking_Session_ID],
			S.[Wait_Type],
			S.[Wait_Time_Seconds],
			S.[Total_Elapsed_Time_Seconds],
			S.[SQL_Handle],
			S.[Statement_SQL_Handle],
			S.[SQL_Text],
			S.[Date_Updated]);
GO

EXEC	[dbo].[uspDBMon_GetLongRunningQueries]
SELECT	* 
FROM	[dbo].[tblDBMon_Long_Running_Queries]
GO

--Create a SQL Agent job to capture the information every 5 minutes
USE [msdb]
GO

IF EXISTS (SELECT TOP 1 1 FROM	msdb.dbo.sysjobs WHERE [name] = 'DBA - DBMon - Get Long Running Queries')
	BEGIN
		EXEC msdb.dbo.sp_delete_job @job_name=N'DBA - DBMon - Get Long Running Queries'
	END
GO

BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'DBA' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'DBA'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'DBA - DBMon - Get Long Running Queries', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'EXEC	[dbo].[uspDBMon_GetLongRunningQueries]
SELECT	* 
FROM	[dbo].[tblDBMon_Long_Running_Queries]
GO', 
		@category_name=N'DBA', 
		@owner_login_name=N'sa', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [uspDBMon_GetLongRunningQueries]    Script Date: 10/23/2022 12:02:38 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'uspDBMon_GetLongRunningQueries', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC	[dbo].[uspDBMon_GetLongRunningQueries]', 
		@database_name=N'dba_local', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'Every 5 Minute', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=4, 
		@freq_subday_interval=5, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20221023, 
		@active_end_date=99991231, 
		@active_start_time=15, 
		@active_end_time=235959
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:
GO

EXEC msdb.dbo.sp_start_job @job_name=N'DBA - DBMon - Get Long Running Queries'
GO
